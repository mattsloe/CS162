Student::Student(const char initId[], double gpa)
{
	this.gpa = gpa;
	strcpy(id,initId);
}

bool Student::isLessThanByID(const Student& aStudent) const
{
	if(strcmp(id,aStudent.id) < 0) return true;
	return false;
}

//write code to test Student::qualifyForHonor
	double minHonorGPA = 3.5; //minimum gpa requirement for honors
	//CASE 1: Min Honor GPA = 3.5
	cout << "If minimum GPA for Honors is 3.5:\n";
	if (s1.qualifyForHonor(minHonorGPA)){ //Test s1 for honors qual
		cout << "Student 1 qualifies for Honors" << endl;
	}

	if (s2.qualifyForHonor(minHonorGPA)){ //Test s2 for honors qual
		cout << "Student 2 qualifies for Honors" << endl;
	}
	
	//CASE 2: Min Honor GPA = 3.8
	cout << "If minimum GPA for Honors is 3.8:\n";
	minHonorGPA = 3.8;
	if (s1.qualifyForHonor(minHonorGPA)){ //Test s1 for honors qual
		cout << "Student 1 qualifies for Honors" << endl;
	}

	if (s2.qualifyForHonor(minHonorGPA)){ //Test s2 for honors qual
		cout << "Student 2 qualifies for Honors" << endl;
	}	

G10	3.9
G20	3.5
Student 1 is less than Student 2
If minimum GPA for Honors is 3.5:
Student 1 qualifies for Honors
Student 2 qualifies for Honors
If minimum GPA for Honors is 3.8:
Student 1 qualifies for Honors
