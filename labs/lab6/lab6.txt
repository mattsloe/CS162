bool LinkedList::remove(int val) //removes any node whose data matches val
{
    bool flag = false;
    //check the bounds of the argument, check if the list is populated
    Node * deletedNode, * p, * q;
    p = head;
    //iterate through the list
    while(p != nullptr){
        //check to delete node
        if(p->data == val){
            if(p->prev != nullptr){
                p = p->prev;
                deletedNode = p->next;
                p->next = deletedNode->next; //repoint the pointers
                q = p->next;
                if(q != nullptr) q->prev = p;
                delete deletedNode; //deallocate the node
                size--; //decrement the size of the list
                if(p->next == nullptr) tail = p;
                p = p->next;
            }else{
                if(p->next == nullptr){ //if a list with only one node
                    delete p;
                    head = nullptr;
                    tail = nullptr;
                    size = 0;
                    p = p->next;
                   
                }else{
                    deletedNode = p;
                    p = p->next;
                    p->prev = nullptr;
                    delete deletedNode;
                    head = p;
                    size--;
                }
            }
            flag = true;
        }else{
            p = p->next;
        }
        //set pointer to next node
    } //pointer is now pointing at node before the deleted node
    return flag;
}

Traversal in forward direction
12 9 7 1 10 3 
Traversal in reverse direction
3 10 1 7 9 12 
Traversal in forward direction
9 10 
Traversal in reverse direction
10 9 
